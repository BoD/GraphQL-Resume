schema
@link(url: "https://specs.apollo.dev/link/v1.0")
@link(url: "https://specs.apollo.dev/join/v0.2", for: EXECUTION)
{
    query: Query
}

directive @join__field(graph: join__Graph!, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

type Address
@join__type(graph: IDENTITY)
{
    addressLines: [String!]!
}

scalar Date
@join__type(graph: IDENTITY)

scalar Email
@join__type(graph: IDENTITY)

type Experience
@join__type(graph: EXPERIENCE)
{
    period: Period!
    jobTitle: String!
    organization: Organization!
    items: [ExperienceItem!]!
    environment: [String!]!
}

type ExperienceItem
@join__type(graph: EXPERIENCE)
{
    description: String!
}

type Identity
@join__type(graph: IDENTITY)
{
    firstName: String!
    lastName: String!
    birthDate: Date!
    age: Int!
    nationality: Nationality!
    email: Email!
    phoneNumber: PhoneNumber!
    address: Address!
}

scalar join__FieldSet

enum join__Graph {
    EXPERIENCE @join__graph(name: "experience", url: "http://localhost:8082/graphql")
    IDENTITY @join__graph(name: "identity", url: "http://localhost:8081/graphql")
}

enum Language
@join__type(graph: EXPERIENCE)
@join__type(graph: IDENTITY)
{
    EN
    FR
}

scalar link__Import

enum link__Purpose {
    """
    `SECURITY` features provide metadata necessary to securely resolve fields.
    """
    SECURITY

    """
    `EXECUTION` features provide metadata necessary for operation execution.
    """
    EXECUTION
}

type Meta
@join__type(graph: IDENTITY)
{
    lastModified: Date!
}

enum Nationality
@join__type(graph: IDENTITY)
{
    FRANCE
}

type Organization
@join__type(graph: EXPERIENCE)
{
    name: String!
    description: String!
    location: String!
    website: Url
    moreInfo: String
}

type Period
@join__type(graph: EXPERIENCE)
{
    start: PeriodStartDate!
    end: PeriodEndDate!
}

type PeriodEndDate
@join__type(graph: EXPERIENCE)
{
    """Null means the period is still ongoing"""
    date: String
}

type PeriodStartDate
@join__type(graph: EXPERIENCE)
{
    date: String!
}

type PhoneNumber
@join__type(graph: IDENTITY)
{
    countryCode: Int
    number: String!
}

type Query
@join__type(graph: EXPERIENCE)
@join__type(graph: IDENTITY)
{
    experience(language: Language!): [Experience!]! @join__field(graph: EXPERIENCE)
    identity(language: Language!): Identity @join__field(graph: IDENTITY)
    meta: Meta @join__field(graph: IDENTITY)
}

scalar Url
@join__type(graph: EXPERIENCE)
